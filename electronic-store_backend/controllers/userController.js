import User from "../models/userModel.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import sendEmail from "../utils/sendEmail.js";

const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "30d" });
};

const usedTokens = new Set();

export const getUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const registerUser = async (req, res) => {
  const { name, email, password, phone, address } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser)
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });

    const encodedData = Buffer.from(
      JSON.stringify({
        name,
        email,
        password,
        phone,
        address,
      })
    ).toString("base64");

    const verifyUrl = `${process.env.FRONTEND_URL}/verify/${encodedData}`;

    const message = `
      <div style="font-family: 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f5f6fa; padding: 30px;">
        <div style="max-width: 600px; margin: 0 auto; background: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 6px rgba(0,0,0,0.1);">
          
          <!-- Header -->
          <div style="background-color: #28a745; color: white; padding: 20px 0; text-align: center;">
            <h1 style="margin: 0; font-size: 24px; letter-spacing: 1px;">HUINH Store</h1>
          </div>

          <!-- Body -->
          <div style="padding: 30px 40px;">
            <h2 style="color: #333; font-size: 20px;">Xin ch√†o ${name},</h2>
            <p style="color: #555; font-size: 15px; line-height: 1.6;">
              C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>HUINH Store</strong>.<br/>
              Vui l√≤ng nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c email v√† ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω:
            </p>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${verifyUrl}" 
                style="background-color: #28a745; color: white; padding: 12px 28px; 
                font-size: 16px; border-radius: 6px; text-decoration: none; 
                display: inline-block; font-weight: 600;">
                X√°c th·ª±c t√†i kho·∫£n
              </a>
            </div>

            <p style="color: #777; font-size: 14px; line-height: 1.6;">
              N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.<br/>
              Li√™n k·∫øt x√°c th·ª±c c√≥ hi·ªáu l·ª±c trong v√≤ng <strong>24 gi·ªù</strong>.
            </p>
          </div>

          <!-- Footer -->
          <div style="background-color: #f1f3f6; color: #888; text-align: center; padding: 15px; font-size: 13px;">
            ¬© 2025 HUINH Store. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.<br/>
            <a href="https://huinh.vn" style="color: #28a745; text-decoration: none;">huinh.vn</a>
          </div>
        </div>
      </div>
    `;

    try {
      await sendEmail(email, "X√°c th·ª±c t√†i kho·∫£n cho HUINH Store", message);

      return res.status(200).json({
        success: true,
        message:
          "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
      });
    } catch (emailError) {
      console.error("‚ùå L·ªói g·ª≠i email:", emailError);
      return res.status(500).json({
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.",
      });
    }
  } catch (error) {
    console.error("Register error:", error);
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng k√Ω: " + error.message });
  }
};

export const verifyEmail = async (req, res) => {
  const token = req.params.token;
  const now = new Date().toISOString();

  console.log("=== VERIFY REQUEST START ===");
  console.log("üïí Th·ªùi gian:", now);
  console.log("üì¶ Token (50 k√Ω t·ª± ƒë·∫ßu):", token ? token.slice(0, 50) : null);
  console.log("üåê IP:", req.ip || req.connection?.remoteAddress);
  console.log("üß≠ User-Agent:", req.get("User-Agent"));
  console.log("üîó Referer:", req.get("referer"));
  console.log("============================\n");

  const ua = (req.get("User-Agent") || "").toLowerCase();
  if (
    ua.includes("google") ||
    ua.includes("proxy") ||
    ua.includes("crawler") ||
    ua.includes("bot") ||
    ua.includes("preview")
  ) {
    console.log("üö´ Ph√°t hi·ªán prefetch / bot UA:", ua);
    return res.status(200).json({
      message:
        "H·ªá th·ªëng ph√°t hi·ªán truy c·∫≠p t·ª± ƒë·ªông (prefetch). Vui l√≤ng m·ªü li√™n k·∫øt trong tr√¨nh duy·ªát th·∫≠t ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
    });
  }
  await new Promise((r) => setTimeout(r, 1000));

  try {
    const decoded = JSON.parse(Buffer.from(token, "base64").toString("utf8"));

    const { name, email, password, phone, address } = decoded;

    console.log("‚úÖ ƒê√£ gi·∫£i m√£ token cho:", email);

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i:", email);
      return res
        .status(400)
        .json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥." });
    }

    const user = await User.create({
      name,
      email,
      password,
      phone,
      address,
      isVerified: true,
    });

    console.log("üéâ T·∫°o t√†i kho·∫£n th√†nh c√¥ng cho:", email);

    res.status(201).json({
      message: "X√°c th·ª±c th√†nh c√¥ng! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o.",
      token: generateToken(user._id),
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
      },
    });

    console.log("=== VERIFY REQUEST END ===\n");
  } catch (error) {
    console.error("‚ùå L·ªói khi x√°c th·ª±c:", error);
    res
      .status(400)
      .json({ message: "Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
  }
};

export const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user)
      return res.status(401).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });

    if (!user.isVerified)
      return res.status(403).json({ message: "T√†i kho·∫£n ch∆∞a x√°c th·ª±c email" });

    const match = await bcrypt.compare(password, user.password);
    if (!match)
      return res.status(401).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token: generateToken(user._id),
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        isAdmin: user.isAdmin,
      },
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select("-password");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const updateProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;
    user.phone = req.body.phone || user.phone;
    user.address = req.body.address || user.address;

    if (req.body.password) {
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(req.body.password, salt);
    }

    const updatedUser = await user.save();

    res.json({
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
      user: {
        _id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        phone: updatedUser.phone,
        address: updatedUser.address,
      },
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
